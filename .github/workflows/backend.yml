name: Backend CI/CD

on:
  push:
    branches: [main]
    paths: ['backend/**']
  pull_request:
    branches: [main]
    paths: ['backend/**']

jobs:
  backend-pipeline:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
      
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
      
      - name: Lint
        run: |
          cd backend
          flake8 . --max-line-length=120
      
      - name: Test
        run: |
          cd backend
          python manage.py test
      
      - name: Build Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          cd backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }} .
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest .
      
      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Push Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest
      
      - name: Deploy to Kubernetes
        if: github.ref == 'refs/heads/main'
        run: |
          echo "${{ secrets.KUBECONFIG_DATA }}" | base64 --decode > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Update deployment with new image
          kubectl set image deployment/backend backend=${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }} -n production
          
          # Wait for rollout
          kubectl rollout status deployment/backend -n production --timeout=300s
          
          # Flush Redis cache after backend deployment
          kubectl exec -n production deployment/redis -- redis-cli FLUSHALL
          
          # Verify deployment
          kubectl get pods -l app=backend -n production
      
      - name: Slack Notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "Backend deployment: ${{ job.status }} (SHA: ${{ github.sha }})"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}